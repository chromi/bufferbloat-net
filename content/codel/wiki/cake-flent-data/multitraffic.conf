## -*- mode: python; coding: utf-8 -*-

# note this test requires a working ledbat congestion control module and D-ITG

# runs a series of workload combinations in sequence, starting and ending with idle

include("netperf_definitions.inc")
DESCRIPTION="Multi-Traffic Load Test"
DEFAULTS={'PLOT': "all"}

TOTAL_LENGTH = LENGTH*11 + DELAY*2
TCP_HOST = HOST if not HOSTS else HOSTS[0]
TORRENT_HOST = HOST if not HOSTS else HOSTS[1] if HOSTS[1] else HOSTS[0]
VOIP_HOST = HOST if not HOSTS else HOSTS[2] if HOSTS[2] else HOSTS[0]

DATA_SETS = o([
    ('Ping (ms) UDP EF',
     {'command': find_netperf("UDP_RR", TOTAL_LENGTH, TCP_HOST, marking="EF,EF"),
      'data_transform': 'rr_to_ms',
      'units': 'ms',
      'runner': 'netperf_demo',}),
    ('Ping (ms) UDP BK',
     {'command': find_netperf("UDP_RR", TOTAL_LENGTH, TCP_HOST, marking="CS1,CS1"),
      'data_transform': 'rr_to_ms',
      'units': 'ms',
      'runner': 'netperf_demo',}),
    ('Ping (ms) UDP BE',
     {'command': find_netperf("UDP_RR", TOTAL_LENGTH, TCP_HOST),
      'data_transform': 'rr_to_ms',
      'units': 'ms',
      'runner': 'netperf_demo',}),
    ('Ping (ms) ICMP',
     {'command': find_ping(IP_VERSION, STEP_SIZE, TOTAL_LENGTH, TCP_HOST),
      'units': 'ms',
      'runner': 'ping',}),
    ('Ping (ms) avg',
     {'apply_to': [glob("Ping (ms)*")],
       'units': 'ms',
       'runner': 'average',}),

    ('UDP EF induced delay',
     {'units': 'ms', 'runner': 'diff_min', 'apply_to': ['Ping (ms) UDP EF']}),
    ('UDP BK induced delay',
     {'units': 'ms', 'runner': 'diff_min', 'apply_to': ['Ping (ms) UDP BK']}),
    ('UDP BE induced delay',
     {'units': 'ms', 'runner': 'diff_min', 'apply_to': ['Ping (ms) UDP BE']}),
    ('ICMP induced delay',
     {'units': 'ms', 'runner': 'diff_min', 'apply_to': ['Ping (ms) ICMP']}),
    ('Average induced delay',
     {'apply_to': [glob("*induced delay")],
       'units': 'ms',
       'runner': 'average',}),

    ('TCP upload BE 1',
     {'command': find_netperf("TCP_STREAM", LENGTH*2, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 1',
     {'command': find_netperf("TCP_MAERTS", LENGTH*2, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload Torrent',
     {'command': find_netperf("TCP_STREAM", LENGTH*8, TORRENT_HOST, marking="CS1,CS1",
                          extra_test_args="-K ledbat,ledbat"),
      'delay': DELAY + LENGTH,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',
      'duplicates': 20}),
    ('TCP download Torrent',
     {'command': find_netperf("TCP_MAERTS", LENGTH*8, TORRENT_HOST, marking="CS1,CS1",
                          extra_test_args="-K ledbat,ledbat"),
      'delay': DELAY + LENGTH,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',
      'duplicates': 20}),

    ('TCP upload BE 2',
     {'command': find_netperf("TCP_STREAM", LENGTH*5, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY + LENGTH*3,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 2',
     {'command': find_netperf("TCP_MAERTS", LENGTH*5, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY + LENGTH*3,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload BE 3',
     {'command': find_netperf("TCP_STREAM", LENGTH*4, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY + LENGTH*4,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 3',
     {'command': find_netperf("TCP_MAERTS", LENGTH*4, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY + LENGTH*4,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload BE 4',
     {'command': find_netperf("TCP_STREAM", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 4',
     {'command': find_netperf("TCP_MAERTS", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload BE 5',
     {'command': find_netperf("TCP_STREAM", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+2 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 5',
     {'command': find_netperf("TCP_MAERTS", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+2 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload BE 6',
     {'command': find_netperf("TCP_STREAM", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+3 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 6',
     {'command': find_netperf("TCP_MAERTS", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+3 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload BE 7',
     {'command': find_netperf("TCP_STREAM", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+4 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 7',
     {'command': find_netperf("TCP_MAERTS", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+4 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload BE 8',
     {'command': find_netperf("TCP_STREAM", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+5 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 8',
     {'command': find_netperf("TCP_MAERTS", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+5 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload BE 9',
     {'command': find_netperf("TCP_STREAM", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+6 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download BE 9',
     {'command': find_netperf("TCP_MAERTS", LENGTH*3, TCP_HOST, marking="CS0,CS0"),
      'delay': DELAY+6 + LENGTH*5,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

	('VoIP',
	 {'command': find_itgsend('VoIP', LENGTH*11 + DELAY, VOIP_HOST, local_bind=(LOCAL_BIND[0] if LOCAL_BIND else None)),
	  'duration': LENGTH*11 + DELAY,
	  'delay': DELAY / 2,
      'interval': STEP_SIZE,
	  'units': 'Kbps',
	  'control_host': (CONTROL_HOST or VOIP_HOST),
	  'runner': 'ditg',}),
	('VoIP::bitrate', {'units': 'Kbits/s', 'runner': 'null'}),
	('VoIP::delay', {'units': 'ms', 'runner': 'null', 'data_transform': 's_to_ms'}),
	('VoIP::jitter', {'units': 'ms', 'runner': 'null', 'data_transform': 's_to_ms'}),
	('VoIP::loss', {'units': 'count', 'runner': 'null'}),
	('VoIP::induced_delay', {'units': 'ms', 'runner': 'diff_min', 'apply_to': ['VoIP::delay']}),

    ('TCP upload EF 1',
     {'command': find_netperf("TCP_STREAM", LENGTH*3, TCP_HOST, marking="EF,EF"),
      'delay': DELAY + LENGTH*7,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),
    ('TCP download EF 1',
     {'command': find_netperf("TCP_MAERTS", LENGTH*3, TCP_HOST, marking="EF,EF"),
      'delay': DELAY + LENGTH*7,
      'units': 'Mbits/s',
      'runner': 'netperf_demo',}),

    ('TCP upload Torrent sum',
     {'apply_to': [glob("TCP upload Torrent*", exclude=["TCP upload Torrent avg"])],
       'units': 'Mbits/s',
       'runner': 'sum',}),
    ('TCP download Torrent sum',
     {'apply_to': [glob("TCP download Torrent*", exclude=["TCP download Torrent avg"])],
       'units': 'Mbits/s',
       'runner': 'sum',}),

    ('TCP upload BE sum',
     {'apply_to': [glob("TCP upload BE *", exclude=["TCP upload BE avg"])],
       'units': 'Mbits/s',
       'runner': 'sum',}),
    ('TCP download BE sum',
     {'apply_to': [glob("TCP download BE *", exclude=["TCP download BE avg"])],
       'units': 'Mbits/s',
       'runner': 'sum',}),

    ('TCP upload sum',
     {'apply_to': ['TCP upload EF 1', 'TCP upload BE sum', 'TCP upload Torrent sum'],
       'units': 'Mbits/s',
       'runner': 'sum',}),
    ('TCP download sum',
     {'apply_to': ['TCP download EF 1', 'TCP download BE sum', 'TCP download Torrent sum'],
       'units': 'Mbits/s',
       'runner': 'sum',}),

    ])

PLOTS = o([
    ('ping',
     {'description': 'Ping plot',
      'type': 'timeseries',
      'legend_title': 'Ping (ms)',
      'axis_labels': ['Latency (ms)'],
      'series': [
                 {'data': 'Ping (ms) UDP BE',
                  'label': 'UDP BE'},
                 {'data': 'Ping (ms) UDP BK',
                  'label': 'UDP BK'},
                 {'data': 'Ping (ms) ICMP',
                  'label': 'ICMP'},
		 {'data': 'Ping (ms) UDP EF',
                  'label': 'UDP EF'},
                 {'data': 'Ping (ms) avg',
                  'label': 'Avg',
                  'smoothing': 10,
                  'color': 'black',
                  'linewidth': 2}]}),

    ('ping_scaled',
     {'description': 'Ping w/axes scaled to remove outliers',
      'parent': 'ping',
      'scaling': (5,95)}),

    ('ping_cdf',
     {'description': 'Ping CDF plot',
      'type': 'cdf',
      'axis_labels': ['Latency (ms)'],
      'parent': 'ping',
      'cutoff': (DELAY,DELAY)}),

    ('icmp_cdf',
     {'description': 'ICMP CDF plot',
      'type': 'cdf',
      'axis_labels': ['Latency (ms)'],
      'series': [{'data': 'Ping (ms) ICMP',
                  'label': 'Ping (ms)'},
                 ],
      'cutoff': (DELAY,DELAY)}),

    ('box_ping',
     {'description': 'Ping box plot',
      'parent': 'ping',
      'type': 'box'}),

    ('download',
     {'description': 'Download bandwidth plot',
      'type': 'timeseries',
      'legend_title': 'TCP download',
      'series': [{'data': glob('TCP download Torrent sum'),
                  'label': 'BT total',
                  'smoothing': 10,
                  'color': 'red',
                  'linewidth': 2},
                 {'data': glob('TCP download BE*', exclude=['TCP download BE sum']),
                  'label': 'BE'},
                 {'data': 'TCP download EF 1',
                  'label': 'EF',
                  'smoothing': 10,
                  'color': 'blue',
                  'linewidth': 2},
                 {'data': 'TCP download BE sum',
                  'label': 'BE total',
                  'smoothing': 10,
                  'color': 'black',
                  'linewidth': 2}]}),

    ('upload',
     {'description': 'Upload bandwidth plot',
      'type': 'timeseries',
      'legend_title': 'TCP upload',
      'series': [{'data': glob('TCP upload Torrent sum'),
                  'label': 'BT total',
                  'smoothing': 10,
                  'color': 'red',
                  'linewidth': 2},
                 {'data': glob('TCP upload BE*', exclude=['TCP upload BE sum']),
                  'label': 'BE'},
                 {'data': 'TCP upload EF 1',
                  'label': 'EF',
                  'smoothing': 10,
                  'color': 'blue',
                  'linewidth': 2},
                 {'data': 'TCP upload BE sum',
                  'label': 'BE total',
                  'smoothing': 10,
                  'color': 'black',
                  'linewidth': 2}]}),

    ('totals_bandwidth',
     {'description': 'Total bandwidth',
      'type': 'timeseries',
      'series': [{'data': 'TCP download sum',
                  'label': 'Download',
                  'smoothing': 10},
                 {'data': 'TCP upload sum',
                  'label': 'Upload',
                  'smoothing': 10}]}),

    ('totals',
     {'description': 'Total summary',
      'type': 'timeseries',
      'dual_axes': True,
      'axis_labels': [None, 'Latency (ms)'],
      'series': [{'data': 'TCP download sum',
                  'label': 'Download'},
                 {'data': 'TCP upload sum',
                  'label': 'Upload'},
                 {'data': 'Ping (ms) avg',
                  'label': 'Ping (ms)',
                  'axis': 2},
                 {'data': 'VoIP::delay',
                  'label': 'VoIP delay',
                  'axis': 2},
                ]}),

    ('all',
     {'description': 'Download, upload, ping (unscaled versions)',
      'type': 'meta',
      'subplots': ('download', 'upload', 'ping', 'voip_delay_loss')}),

    ('box_download',
     {'description': 'Download bandwidth box plot',
      'parent': 'download',
      'type': 'box'}),

    ('box_upload',
     {'description': 'Upload bandwidth box plot',
      'parent': 'upload',
      'type': 'box'}),

    ('box_ping',
     {'description': 'Ping box plot',
      'parent': 'ping',
      'type': 'box'}),

    ('box_totals',
     {'description': 'Box plot of totals',
      'parent': 'totals',
      'type': 'box',}),
    ])

#VOIP_CUTOFF = (DELAY + LENGTH*6, DELAY)
VOIP_CUTOFF = (DELAY, DELAY)

PLOTS['voip_delay']              = {'description': 'VoIP delay and jitter',
                                    'type': 'timeseries',
                                    'axis_labels': ['One-way delay (ms)'],
                                    'series': [{'data': 'VoIP::delay',
                                                'label': 'VoIP delay'},
                                               {'data': 'VoIP::jitter',
                                                'label': 'VoIP jitter',
                                                'color': 'green'}
                                    ]}
PLOTS['voip_delay_cdf']          = {'description': 'VoIP delay and jitter CDF',
                                    'type': 'cdf',
                                    'cutoff': VOIP_CUTOFF,
                                    'parent': 'voip_delay'}
PLOTS['voip_delay_box']          = {'description': 'VoIP delay and jitter box plot',
                                    'type': 'box',
                                    'cutoff': VOIP_CUTOFF,
                                    'parent': 'voip_delay'}
PLOTS['voip_induced_delay']      = {'description': 'VoIP induced delay CDF',
                                    'type': 'timeseries',
                                    'axis_labels': ['Induced one-way delay (ms)'],
                                    'series': [{'data': 'VoIP::induced_delay',
                                                'label': 'VoIP induced delay'}]}
PLOTS['voip_induced_delay_cdf']  = {'description': 'VoIP induced delay box plot',
                                    'type': 'cdf',
                                    'cutoff': VOIP_CUTOFF,
                                    'parent': 'voip_induced_delay'}
PLOTS['voip_induced_delay_box']  = {'description': 'VoIP induced delay box plot',
                                    'type': 'box',
                                    'cutoff': VOIP_CUTOFF,
                                    'parent': 'voip_induced_delay'}
PLOTS['voip_box_delay_loss']     = {'description': "Box delay/loss combination plot",
                                    'type': 'box_combine',
                                    'cutoff': VOIP_CUTOFF,
                                    'dual_axes': True,
                                    'axis_labels': ['Mean induced delay (ms)', 'Mean loss rate'],
                                    'series': [{'data': 'VoIP::delay',
                                                'label': 'Induced VoIP delay',
                                                'combine_mode': 'mean_span',
                                                'axis': 1},
                                               {'data': 'VoIP::loss',
                                                'label': 'VoIP loss rate',
                                                'combine_mode': 'raw_seq_loss',
                                                'axis': 2}]}
PLOTS['voip_mos_combine']         = {'description': "VoIP MOS combination plot",
                                    'type': 'box_combine',
                                    'cutoff': VOIP_CUTOFF,
                                    'axis_labels': ['MOS value'],
                                    'series': [{'data': 'VoIP',
                                                'label': 'MOS',
                                                'combine_mode': 'mos'},
                                               ]}
PLOTS['voip_bitrate']            = {'description': 'VoIP bitrate',
                                    'type': 'timeseries',
                                    'series': [{'data': 'VoIP::bitrate',
                                                'label': 'Bitrate'}
                                    ]}
PLOTS['voip_mos_upload']          = {'description': "VoIP MOS and upload throughput plot",
                                     'type': 'box_combine',
                                     'cutoff': VOIP_CUTOFF,
                                     'axis_labels': ['MOS value', 'Mbit/s'],
                                     'dual_axes': True,
                                     'series': [{'data': 'VoIP',
                                                 'label': 'MOS',
                                                 'combine_mode': 'mos'},
                                                {'data': 'TCP upload sum',
                                                 'label': 'Upload',
                                                 'combine_mode': 'meta:MEAN_VALUE',
                                                 'axis': 2},
                                     ]}
PLOTS['voip_loss']               = {'description': 'VoIP loss',
                                    'type': 'timeseries',
                                    'axis_labels': ['Loss count'],
                                    'series': [{'data': 'VoIP::loss',
                                                'label': 'VoIP loss',
                                                'linestyle': '',
                                                'marker': '.',}
                                    ]}
PLOTS['voip_delay_loss']         = {'description': 'VoIP delay and loss plots',
                                    'type': 'meta',
                                    'subplots': ('voip_delay', 'voip_loss', 'voip_induced_delay')}

include("common.inc")
